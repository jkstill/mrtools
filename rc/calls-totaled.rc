# Jared Still 2023
# jkstill@gmail.com

--init='

=encoding utf8

=head1 calls-totaled.rc

 For use with Method R mrskew

 Show each call, indented as per calls.rc

 Show the time (either $e or $c) per line.

 When dep changes from depmin to dep > depmin, emit a total of time.


 The first few lines and last few lines of a trace file may not be rendered, particularly for incomplete traces.

 A partial trace may not work at all if there is no switch from depmin to dep > depmin and back.

 $ mrskew --rc=calls-totaled.rc trace-2023-06-16/DTFPRD1_ora_61207.trc

 Example

			  END-TIM		 LINE	  PARSE-ID	  EXEC-ID  CALL-NAME(BOUND-VALUES)						 STATEMENT-TEXT											 Elapsed			  Total
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------
	 ...
	 6708007.983501		  503				0			  0  XCTEND												 #():trace-2023-06-16/TDFPRD1_ora_61207.trc		0.000000
	 6708007.983846		  506			 241			495  CLOSE												 select queryId, queryflags, selectList, fromLi 0.000281
	 6708007.990904		  509			  30			497  CLOSE												 SELECT H.* FROM HOLIDAY H WHERE ( H."Clinic" = 0.000006
	 6708007.991408		  514				0			514  · EXEC											  · update CRC$_RESULT_CACHE_STATS set NAME = :1 0.000367		 0.099371
	 6708007.994062		  520			 520			  0  PARSE												 SELECT R.* FROM RESERVE R WHERE R."Date" = :1	0.000718
	 6708007.995850		  521				0			521  · EXEC											  · select count(*) from sys.col_group_usage$ wh 0.000035		 0.001085
	 6708007.995921		  522				0			521  · FETCH											  · select count(*) from sys.col_group_usage$ wh 0.000026
	 6708007.995973		  523				0			521  · CLOSE											  · select count(*) from sys.col_group_usage$ wh 0.000001
	 6708007.996052		  524				0			524  · EXEC											  · select count(*) from sys.col_group_usage$ wh 0.000017
	 6708007.996104		  525				0			524  · FETCH											  · select count(*) from sys.col_group_usage$ wh 0.000013
	 6708007.996151		  526				0			524  · CLOSE											  · select count(*) from sys.col_group_usage$ wh 0.000001
	 6708007.996207		  527				0			527  · EXEC											  · select count(*) from sys.col_group_usage$ wh 0.000014
	 6708007.996257		  528				0			527  · FETCH											  · select count(*) from sys.col_group_usage$ wh 0.000013
	 6708007.996302		  529				0			527  · CLOSE											  · select count(*) from sys.col_group_usage$ wh 0.000001
	 6708007.996355		  530				0			530  · EXEC											  · select count(*) from sys.col_group_usage$ wh 0.000013
	 6708007.996403		  531				0			530  · FETCH											  · select count(*) from sys.col_group_usage$ wh 0.000010
	 6708007.996447		  532				0			530  · CLOSE											  · select count(*) from sys.col_group_usage$ wh 0.000001
	 6708007.997351		  533			 520			533  EXEC												 SELECT R.* FROM RESERVE R WHERE R."Date" = :1	0.003128
	 6708007.997631		  535			 520			533  FETCH												 SELECT R.* FROM RESERVE R WHERE R."Date" = :1	0.000162
	 6708007.998101		  539				0			  0  XCTEND												 #():trace-2023-06-16/TDFPRD1_ora_61207.trc		0.000000
	 6708008.010271		  541			 520			533  CLOSE												 SELECT R.* FROM RESERVE R WHERE R."Date" = :1	0.000010
	 6708008.010418		  546			 546			  0  PARSE												 SELECT H.* FROM HOLIDAY H WHERE ( H."Clinic" = 0.000071
	 6708008.010951		  551			 551			  0  · PARSE											  · select max(FA#) from SYS_FBA_FA				  0.000247		 0.003516
	 ...

=cut

# sub total, by depth ($dep)
# subtotals for possible future use
my @subtotals=(0,0,0,0,0,0,0);
my $total = 0;
my $DEBUG=0;
my $prevDep=9999;

#
sub getTotal($) {
	# $t is some time value - elapse, cpu,...
	my ($t) = @_;
	# r will be non-zero when reaching depmin+1 following depmin
	my $r = 0;

	if ($DEBUG) {
		print "==============================\n";
		print "text: $text\n";
		print "		dep: $dep\n";
		print " prevDep: $prevDep\n";
		print "		  t: " . sprintf("%6.6f",$t) . "\n";
		print "------------------------------\n";
	}

	# transaction completed when switching from $depmin to $depmin+1
	if ( $dep > $depmin	and $prevDep == $depMin ) {
		$r = $total;
		$total = $t; # first value of next group to total

		print "SWITCHED DEP - dep: $dep prevDep; $prevDep\n" if $DEBUG;
		print "	  total: $total\n" if $DEBUG;

	} else {
		$total += $t;
	}

	$prevDep = $dep;

	if ($DEBUG) {
		print "	  total: " . sprintf("%6.6f",$total) . "\n";
	}

	return $r;
}

sub getString($) {
	my ($str) = @_;
	printf (qq{getString-\$str: %6.6f\n},$str) if $DEBUG;

	if ( $str) {
		print "	 returning value\n" if $DEBUG;
		return sprintf(q{%6.6f},$str);
	} else {
		print "	 returning empty string\n" if $DEBUG;
		return "";
	}
}
'

# first option uses $e for elapsed time
# second option uses $af for accounted for time
# with $dep
#--group='sprintf("%17.6f %10d %10d %10d %4s %-40.40s %13s %-.46s %6.6f %13s", $tim, $line, $parse_id, $exec_id,$dep, "· "x$dep.$name.(scalar(@bind)?"(".join(",",@bind).")":""), substr($sqlid,0,13), "· "x$dep.substr($sql . " "x46,0,46),$e, getString( getTotal($e) ))'
# use the following to get accounted for time rather than elapsed time
--group='sprintf("%17.6f %10d %10d %10d %4s %-40.40s %13s %-.46s %6.6f %13s", $tim, $line, $parse_id, $exec_id,$dep, "· "x$dep.$name.(scalar(@bind)?"(".join(",",@bind).")":""), substr($sqlid,0,13), "· "x$dep.substr($sql . " "x46,0,46),$af, getString( getTotal($af) ))'
--group-label='"         END-TIM       LINE   PARSE-ID    EXEC-ID  DEP CALL-NAME(BOUND-VALUES)                  SQLID         STATEMENT-TEXT                                 Elapsed          Total"'

# without $dep
#--group='sprintf("%17.6f %10d %10d %10d  %-40.40s %13s %-.46s %6.6f %13s", $tim, $line, $parse_id, $exec_id, "· "x$dep.$name.(scalar(@bind)?"(".join(",",@bind).")":""), substr($sqlid,0,13), "· "x$dep.substr($sql . " "x46,0,46),$e, getString( getTotal($e) ))'
#--group-label='"         END-TIM       LINE   PARSE-ID    EXEC-ID  CALL-NAME(BOUND-VALUES)                  SQLID         STATEMENT-TEXT                                 Elapsed          Total"'

# first option gets only dbcalss
# second option gets all events
#--alldepths --nohistogram --sort=1na --name=:dbcall --top=0
# use the following to get all events
--alldepths --nohistogram --sort=1na --top=0

