
--init='

use warnings;
use strict;

# snmfc-savings-2.rc
# Jared Still 2024

# set to STDERR and redirect mrskew output to /dev/null to just see this output
my $errCHN=\*STDERR;
my $rptCHN=\*STDOUT;
my $elapsed=0;

# use DEBUG=1, DEBUG=2, ... mrskew...
my $debug = exists($ENV{DEBUG}) ? $ENV{DEBUG} : 0;	
print $errCHN ("DEBUG Enabled\n") if $debug;
my $maxArraySize = exists($ENV{ARRAYSIZE}) ? $ENV{ARRAYSIZE} : 100;	

my %cursorMetrics = ();
my %snmfcMetrics = ();
my @snmfcTimes = ();

BEGIN {
}


sub gatherData {

	my ($sqlid, $execID, $name, $af, $row) = @_;

	#print "name:  $name\n";

	if ( $name =~ /message from client/ ) {
		$cursorMetrics{$execID}->{SNMFC_TIME} += $af;
		$cursorMetrics{$execID}->{SNMFC_COUNT}++;
		$snmfcMetrics{TIME} += $af;
		$snmfcMetrics{COUNT}++;
		push @snmfcTimes, $af;
		print $errCHN "WAIT elapsed: $af\n" if $debug > 1;
	} elsif ( $name =~ /^FETCH/ ) {
		$cursorMetrics{$execID}->{FETCH_COUNT}++;
		$cursorMetrics{$execID}->{FETCH_ROWS} += $row;
		print $errCHN "FETCH Rows: $row\n" if $debug > 1;
	} else {

		print $errCHN "gatherData(): should not receive this data\n";

		print $errCHN qq{

   name: $name
  sqlid: $sqlid
 execID: $execID

};

	die "quitting due to unknown data in gatherData()\n";
		
	}

}

sub median {
	my ($listRef,$sorted) = @_;

	my @list;
	if ($sorted) {
		@list = @{$listRef};
	} else {
		@list = sort { $a <=> $b }  @{$listRef};
	}

	# list count
	my $lc = $#list;
	# .4 will cause the last value in the first half of an even numbered list to be the median
	# .5 will cuse the first value in the second half of an even numbered list to be the median
	my $medianLocation = int(( $lc / 2 ) + .4);
	return $list[$medianLocation];
}


END {

# derived from testing data
# not accurate with benchmark data, but close enough for good estimates
# see array-size-tests.xlsx
my $overheadPerRow=0.00000149493000;

print $errCHN ("This is the END\n") if $debug;

my $snmfcAvgTime = $snmfcMetrics{TIME} / $snmfcMetrics{COUNT};
my $snmfcMedianTime = median(\@snmfcTimes,0);

my ($totalSnmfcCOUNT, $totalSnmfcTIME,$optimizedSNMFC,$checkSNMFC) = (0,0,0,0);

#################################################################
foreach my $execID (keys %cursorMetrics) {
   if (
      exists $cursorMetrics{$execID}->{SNMFC_TIME}
         and exists $cursorMetrics{$execID}->{SNMFC_COUNT}
   ) {
		my $txSnmfcTIME = $cursorMetrics{$execID}->{SNMFC_TIME};
		my $txSnmfcCOUNT = $cursorMetrics{$execID}->{SNMFC_COUNT};
		my $txRowCOUNT = exists $cursorMetrics{$execID}->{FETCH_ROWS} ? $cursorMetrics{$execID}->{FETCH_ROWS} : 0;
		my $txFetchCOUNT = exists $cursorMetrics{$execID}->{FETCH_COUNT} ? $cursorMetrics{$execID}->{FETCH_COUNT} : 0;

      $totalSnmfcTIME +=  $cursorMetrics{$execID}->{SNMFC_TIME};
		$totalSnmfcCOUNT += $cursorMetrics{$execID}->{SNMFC_COUNT};
      $checkSNMFC += $cursorMetrics{$execID}->{SNMFC_COUNT} * $snmfcAvgTime;

      #$optimizedSNMFC += (int($maxArraySize % $cursorMetrics{$execID}->{SNMFC_COUNT} ) + 1) * $snmfcAvgTime;

		my $avgArraySize = int($txRowCOUNT / $txSnmfcCOUNT)+1 ;

		# determine new number of FETCHES x average SNMFC time
		my $testArraySize =  $maxArraySize / $avgArraySize;
		$testArraySize = 1 if $testArraySize < 1;  # avoid modulus 0 error

		# try calculating the local average for use in prediction
		# did not seem to make much difference
		#$snmfcAvgTime = $txSnmfcTIME / $txSnmfcCOUNT;

		my $snmfcCalcTime = $snmfcAvgTime;
		#$snmfcCalcTime = $snmfcMedianTime; # median often results in results that are too optimistic
		
      $optimizedSNMFC += 
		(
			(
         	int($cursorMetrics{$execID}->{SNMFC_COUNT} / $testArraySize )
         	+ ($cursorMetrics{$execID}->{SNMFC_COUNT} % $testArraySize )
      	) * $snmfcCalcTime
		) + ( $overheadPerRow * $txRowCOUNT) ;

      if ($debug) {
         my $mod = int($cursorMetrics{$execID}->{SNMFC_COUNT} / $maxArraySize ) + ($cursorMetrics{$execID}->{SNMFC_COUNT} % $maxArraySize );

			my $snmfcAvgTimeFormatted = sprintf(q{%0.6f},$snmfcAvgTime);
			my $snmfcMedianTimeFormatted = sprintf(q{%0.6f},$snmfcMedianTime);
			my $optimizedSNMFCFormatted = sprintf(q{%0.6f},$optimizedSNMFC);

         print $errCHN qq{

  for exec execID: $execID:

     tx snmfc count: $txSnmfcCOUNT
      tx snmfc time: $txSnmfcTIME
       tx row count: $txRowCOUNT
     tx fetch count: $txFetchCOUNT
   total snmfc TIME: $totalSnmfcTIME
  total snmfc COUNT: $totalSnmfcCOUNT
        check SNMFC: $checkSNMFC
          avg SNMFC: $snmfcAvgTimeFormatted
       median SNMFC: $snmfcMedianTimeFormatted
          opt SNMFC: $optimizedSNMFCFormatted
     avg array size: $avgArraySize
     max array size: $maxArraySize
                mod: $mod

};
      }

   }
}

#################################################################


print $errCHN qq{
  TIME: $snmfcMetrics{TIME}
 COUNT: $snmfcMetrics{COUNT}
   AVG: $snmfcAvgTime
} if $debug;


# convert to seconds
my $realSNMFCFormatted = sprintf(q{%06.6f},$totalSnmfcTIME);
my $checkSNMFCFormatted = sprintf(q{%06.6f},$checkSNMFC);
my $optimizedSNMFCFormatted = sprintf(q{%06.6f},$optimizedSNMFC);
my $optimizedSNMFCSavingsFormatted = sprintf(q{%06.6f},($totalSnmfcTIME - $optimizedSNMFC));

print $rptCHN qq{

       real SNMFC: $realSNMFCFormatted
      check SNMFC: $checkSNMFCFormatted
  optimized SNMFC: $optimizedSNMFCFormatted
       time saved: $optimizedSNMFCSavingsFormatted

};


}

'

--group='$sqlid . q{:} . $exec_id . q{:} . $line . $text . gatherData($sqlid, $exec_id, $name, $af, $row)'
--nohistogram --nohead --nofoot --nodashes
--top=none
# FETCHES commonly exceed 1 second
--where1='($name =~ /message from client/ and $af < 1) or ( $name =~ /FETCH/)'




