
--init='

use warnings;
use strict;
use Carp;
# this 'use lib' does not work as is inside eval{}
#use lib ''/home/jkstill/.method-r/workbench/9.3.0.17/perlmods/lib/site_perl/5.24.0/Data'';

# $e is multiplied by 1e6
# the purpose of this is to impose some time based data on flamegraph.pl
# 1 microsecond is 1 unit - send the number units, as flamegraphs are count based

=head2 snmfc-savings.rc

 estimate the saving to be realized by using oracle arraysize other than default.

 Can call with these set on the command line

 - DEBUG=1
 - VERBOSE=1
 - ARRAYSIZE=N - default to 100

 ARRAYSIZE=200  mrskew --rc=exp.rc --where=''$sqlid eq q{30qna0qr225as}''  trace/cdb2_ora_24316_RC-1.trc

=cut

=encoding utf8

=cut


my $debug;
my $verbose;
my $maxArraySize;

# set to STDERR and redirect mrskew output to /dev/null to just see this output
my $prtCHN=\*STDOUT;

BEGIN {

	print $prtCHN ("This is the BEGIN\n") if $debug;

	$debug = exists($ENV{DEBUG}) ? $ENV{DEBUG} : 0;	
	$verbose = exists($ENV{VERBOSE}) ? $ENV{VERBOSE} : 0;	
	$maxArraySize = exists($ENV{ARRAYSIZE}) ? $ENV{ARRAYSIZE} : 100;	

}


my %mappedNames = (
	q{SQL*Net message from client} => q{SNMFC},
	q{SQL*Net message to client} => q{SNMTC},
);


my %syscalls=();

# use to get avg time
my %syscallWaits=();


# times are in microseconds
sub syscallStats {
	my ($sqlid, $exec_id, $syscallName, $waitTime, $myRows) =  @_;

	my $key = $sqlid . q{:} . $exec_id;

	$syscalls{$key}->{$syscallName}{count}++;

	$syscalls{$key}->{$syscallName}{time} += $waitTime;
	
	# only valid for FETCH
	$syscalls{$key}->{$syscallName}{rows} += $myRows;

	push @{$syscallWaits{mapName($syscallName)}}, $waitTime;

	return;
}


sub mapName {
	my ($syscallName) = @_;

	if (exists( $mappedNames{$syscallName} )) {
		return $mappedNames{$syscallName};
	} else {
		return $syscallName;
	}
}



END {

	print $prtCHN ("This is the END\n") if $debug;

	print $prtCHN ("DEBUG enabled\n") if $debug;	

	my %avgWaitTimes;

	foreach my $key ( sort keys %syscallWaits )  {
		my @waits = @{$syscallWaits{$key}};
		my $totalWaitTime ;
		map { $totalWaitTime+=$_ } @waits;
		my $avgWait = $totalWaitTime / @waits;
		printf $prtCHN "%30s %9.6f avg: %6.6f\n", $key, $totalWaitTime, $avgWait if $verbose;
		$avgWaitTimes{$key} = $avgWait;
	}

	my $newSNMFCWaitTime=0;
	my $totalNewSNMFCWaitTime=0;
	my $totalSNMFCWaitTime=0;
	my $snmfcWaitTime = 0;
	my ($rowCount,$packetCount, $avgArraySize);

	foreach my $key ( keys %syscalls ) {
		print $prtCHN "key: $key\n" if $debug;
		my %calls = %{$syscalls{$key}};

		#print $prtCHN "keys: " . join(' - ', keys %calls) . "\n";

		print $prtCHN "call keys: " if $debug;

		if ($debug) {
			foreach my $syscall ( sort keys %calls ) { 
				print $prtCHN "  '$syscall' ";
			}
			print $prtCHN "\n";
		}

		($rowCount,$packetCount, $avgArraySize) = (0,0,0);

		$snmfcWaitTime = 0;

		foreach my $syscall ( sort keys %calls ) {
			
			if ($verbose) {
				print $prtCHN "\n";
				print $prtCHN "  syscall: $syscall\n";
				print $prtCHN "    count: $calls{$syscall}->{count}\n";
				print $prtCHN "     rows: $calls{$syscall}->{rows}\n";
				printf $prtCHN "     time: %6.6f\n", $calls{$syscall}->{time}; 
			}

			if ($syscall =~ /message from client/) {
				$packetCount = $calls{$syscall}->{count};
				$snmfcWaitTime = $calls{$syscall}->{time};
			} elsif ($syscall =~ /FETCH/) {
				$rowCount = $calls{$syscall}->{count};	
			}
			else {
				print $prtCHN "I do not know what to do with $syscall\n";
			}
		}

		$rowCount = 1 unless $rowCount;

		$avgArraySize = int($rowCount / $packetCount) +1;

		print $prtCHN "     avg array size: $avgArraySize\n" if $verbose;
		printf $prtCHN "     avg snmfc time: %6.6f\n" , $avgWaitTimes{'SNMFC'} if $verbose;

		$totalSNMFCWaitTime += $snmfcWaitTime;

		my $avgWaitTimeRpt = sprintf("%6.6f",$avgWaitTimes{'SNMFC'});

		print $prtCHN qq{

        packetCount: $packetCount
        avgArraySize: $avgArraySize
        maxArraySize: $maxArraySize
        avtWaitTimes: $avgWaitTimeRpt

} if $debug;
		
	} continue {
		if ($avgArraySize < $maxArraySize ) {
			# the '12' is a fudge factor derived by compari
			$newSNMFCWaitTime += (($packetCount * $avgArraySize) / $maxArraySize)  * ($avgWaitTimes{'SNMFC'} ) ;
		} else {
			$newSNMFCWaitTime += $snmfcWaitTime;
		}

		$totalNewSNMFCWaitTime += $newSNMFCWaitTime;

		print $prtCHN " new SNMFC: $newSNMFCWaitTime\n" if $verbose;

	}

	print $prtCHN "\n";
	print $prtCHN "max array size: $maxArraySize\n";
	print $prtCHN "curr SNMFC $totalSNMFCWaitTime\n";
	print $prtCHN " new SNMFC $totalNewSNMFCWaitTime\n";

}


'

--group='$sqlid . q{:} . $exec_id . q{:} . $line . $text . syscallStats($sqlid, $exec_id, $name, $af, $row)'
--name='(message from client|FETCH)'
--nohistogram
--top=1



